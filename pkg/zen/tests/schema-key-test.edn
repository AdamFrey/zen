{ns zen.tests.schema-key-test

 import #{zen.test}

 test-tag {:zen/tags #{zen/tag}
           :zen/desc "a tag for test"}

 str
 {:zen/tags #{zen/schema test-tag}
  :type zen/map
  :keys {:txt {:type zen/string
               :minLength 5}}}

 str-1
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:txt {:type zen/string
               :minLength 5}}}

 add-txt-key
 {:zen/tags #{zen/schema}
  :type zen/map
  :schema-key {:key :name :ns "zen.tests.schema-key-test" :tags #{test-tag}}
  :keys {:name {:type zen/string}}}

 add-txt-key-tests
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Schema-key validations in map"
  :steps
  [{:desc "schema does not contain required tags"
    :do {:type zen.test/validate :schema add-txt-key :data {:name "str-1" :txt "a-string"}}
    :match
    {:errors
     [{:path [:txt]
       :type "unknown-key"
       :message "unknown key :txt"}

      {:path []
       :type "schema"
       :message
       "'zen.tests.schema-key-test/str-1 should be tagged with #{zen.tests.schema-key-test/test-tag}, but #{zen/schema}"
       :schema [add-txt-key]}]}}

   {:desc "ref type is invalid"
    :do {:type zen.test/validate :schema add-txt-key :data {:name "str" :txt 43}}
    :match
    {:errors
     [{:path [:txt]
       :type "string.type"
       :message "Expected type of 'string, got 'long"
       :schema [add-txt-key :schema-key str #_:keys :txt]}]}}

   {:desc "minLength constraint is not satisfied"
    :do {:type zen.test/validate :schema add-txt-key :data {:name "str" :txt "ab"}}
    :match
    {:errors [{:path [:txt]
               :type "string.minLength"
               :message "Expected length >= 5, got 2"
               :schema [add-txt-key :schema-key str #_:keys :txt :minLength]}]}}

   {:desc "Checks if there are additional keys"
    :do {:type zen.test/validate
         :schema add-txt-key
         :data {:name "str"
                :txt "abcef"
                :foo "bar"}}
    :match
    {:errors [{:path [:foo]
               :type "unknown-key"
               :message "unknown key :foo"}]}}

   {:desc "Valid data given"
    :do {:type zen.test/validate :schema add-txt-key :data {:name "str" :txt "foo bar string"}}
    :match
    {:errors zen.test/nil?}}]}

 person
 {:zen/tags #{zen/schema}
  :type  zen/map
  :require #{:bar :foo}
  :keys {:bar {:type zen/integer :min 1}
         :foo {:type zen/string :minLength 5}}}

 add-required-keys
 {:zen/tags #{zen/schema}
  :type zen/map
  :schema-key {:key :man :ns "zen.tests.schema-key-test"}
  :keys {:man {:type zen/string}}}

 add-required-keys-tests
 {:zen/tags #{zen.test/case}
  ;; fails on integer in v1
  :only-for #{:v2}
  :title "Schema-key validations in map"
  :steps
  [{:desc "required keys do not exist"
    :do {:type zen.test/validate :schema add-required-keys :data {:man "person"}}
    :match
    {:errors [{:path [:bar]
               :type "require"
               :message ":bar is required"
               :schema [add-required-keys :schema-key person :require]}
              {:path [:foo]
               :type "require"
               :message ":foo is required"
               :schema [add-required-keys :schema-key person :require]}]}}

   {:desc "required keys exist partially - 0"
    :do {:type zen.test/validate
         :schema add-required-keys
         :data {:man "person"
                :foo "something"}}
    :match
    {:errors [{:path [:bar]
               :type "require"
               :message ":bar is required"
               :schema [add-required-keys :schema-key person :require]}]}}

   {:desc "required keys exist partially - 1"
    :do {:type zen.test/validate
         :schema add-required-keys
         :data {:man "person"
                :bar 0
                :foo "something"}}
    :match
    {:errors [{:path [:bar]
               :type "integer.min"
               :message "Expected >= 1, got 0"
               :schema [add-required-keys :schema-key person #_:keys :bar :min]}]}}

   {:desc "Checks if there are additional keys"
    :do {:type zen.test/validate
         :schema add-required-keys
         :data {:man "person"
                :bar 42
                :foo "something"
                :nop "should not be here"}}
    :match
    {:errors [{:path [:nop]
               :type "unknown-key"
               :message "unknown key :nop"}]}}

   {:desc "Valid data given"
    :do {:type zen.test/validate :schema add-required-keys :data {:man "person"
                                                                  :bar 42
                                                                  :foo "something"}}
    :match
    {:errors zen.test/nil?}}]}

 urn:extension:AnimalPatient.species
 {:zen/tags #{zen/schema}
  :type     zen/map
  :keys     {:valueCode {:type zen/string}}}

 AnimalPatient
 {:zen/tags #{zen/schema}
  :type     zen/map
  :keys     {:resourceType {:type  zen/string
                            :const {:value "Patient"}}
             :extension    {:type  zen/vector
                            :every {:type       zen/map
                                    :keys       {:url {:type zen/string}}
                                    :schema-key {:key :url, :ns "zen.tests.schema-key-test"}}}}}

 extension-test
 {:zen/tags #{zen.test/case}
  :title "Validate fhir extension"
  :only-for #{:v2}
  :steps
  [{:desc "Extension defined and correct"
    :do {:type zen.test/validate
         :schema AnimalPatient
         :data {:resourceType "Patient"
                :extension [{:url "urn:extension:AnimalPatient.species"
                             :valueCode "dog"}]}}
    :match
    {:errors zen.test/empty?}}

   #_{:desc "Extension defined and incorrect"
      :do {:type zen.test/validate
           :schema AnimalPatient
           :data {:resourceType "Patient"
                  :extension [{:url "urn:extension:AnimalPatient.species"
                               :valueCoding {:code "dog"}}]}}
      :match
      {:errors [{:type "unknown-key", :path [:extension 0 :valueCoding]}]}}

   {:desc "Extension undefined"
    :do {:type zen.test/validate
         :schema AnimalPatient
         :data {:resourceType "Patient"
                :extension [{:url "urn:extension:AnimalPatient.breed"
                             :valueCode "doge"}]}}
    :match
    {:errors [{:path [:extension 0 :valueCode],
               :type "unknown-key",
               :message "unknown key :valueCode"}

              {:type "schema"
               :path [:extension 0]
               :schema [zen.tests.schema-key-test/AnimalPatient :extension :every 0 :schema-key]
               :message "Could not find schema zen.tests.schema-key-test/urn:extension:AnimalPatient.breed"}]}}]}}
