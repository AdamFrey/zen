{ns zen.tests.slicing-test

 import #{zen.test}

 Person
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:telecom {:type    zen/vector
                   :every   {:type    zen/map
                             :require #{:system :value}
                             :keys    {:system {:type zen/string}
                                       :value  {:type zen/string}}}
                   :slicing {:slices {"mobile-phone"
                                      {:filter {:engine :zen
                                                :zen    {:type zen/map
                                                         :keys {:system {:const {:value "mobile-phone"}}}}}
                                       :schema {:type     zen/vector
                                                :minItems 1
                                                :every    {:type zen/map
                                                           :keys {:os {:type zen/keyword
                                                                       :enum [{:value :ios}
                                                                              {:value :android}
                                                                              {:value :other}]}}}
                                                :slicing  {:slices {"ios"
                                                                    {:filter {:engine :zen
                                                                              :zen    {:type zen/map
                                                                                       :keys {:os {:const {:value :ios}}}}}
                                                                     :schema {:type     zen/vector
                                                                              :minItems 1}}}}}}}
                             :rest   {:type  zen/vector
                                      :every {:type zen/map :validation-type :open}}}}}}

 telecom-slicing-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Checks if a Person has at least one mobile phone and one of his mobile phones runs ios"
  :steps
  [{:desc "valid data - has ios, android and email contacts"
    :do   {:type   zen.test/validate
           :schema Person
           :data   {:telecom [{:system "mobile-phone"
                               :value  "+72222222222"
                               :os     :ios}
                              {:system   "email"
                               :value    "foo@bar.baz"
                               :provider "baz"}
                              {:system "mobile-phone"
                               :value  "+71111111111"
                               :os     :android}]}}
    :match
    {:errors zen.test/empty?}}

   {:desc "invalid data - no ios contact"
    :do   {:type   zen.test/validate
           :schema Person
           :data   {:telecom [{:system "mobile-phone"
                               :value  "+72222222222"
                               :os     :android}
                              {:system   "email"
                               :value    "foo@bar.baz"
                               :provider "baz"}
                              {:system "mobile-phone"
                               :value  "+71111111111"
                               :os     :android}]}}
    :match
    {:errors
     [{:message "Expected >= 1, got 0"
       :type "vector.minItems"
       :path [:telecom]
       :schema
       [zen.tests.slicing-test/Person
        :telecom
        :slicing
        "mobile-phone"
        :slicing
        "ios"
        :minItems]}]}}

   {:desc "extra element with invalid system and missing value"
    :do   {:type   zen.test/validate
           :schema Person
           :data   {:telecom [{:system "mobile-phone"
                               :value  "+71111111111"
                               :os     :ios}
                              {:system    :wrong-type
                               :extra-key "not error"}]}}
    :match
    {:errors
     [{:message "Expected type of 'string, got 'keyword"
       :type "string.type"
       :path [:telecom 1 :system]
       :schema [zen.tests.slicing-test/Person :telecom :every 1 :system :type]}

      {:message ":value is required"
       :type "require"
       :path [:telecom 1 :value]
       :schema [zen.tests.slicing-test/Person :telecom :every 1 :require]}]}}]}

 required-slice
 {:zen/tags #{zen/schema}
  :type zen/vector
  :every {:type zen/map
          :require #{:kind}
          :keys {:kind {:type zen/string}}}
  :slicing {:slices {"one" {:filter {:engine :zen
                                     :zen {:type zen/map
                                           :keys {:kind {:const {:value "one"}}}}}
                            :schema {:type zen/vector :minItems 1 :maxItems 1}}}}}

 slice-definition
 {:zen/tags #{zen/schema}
  :type zen/vector
  :every {:type zen/map :keys {:kind {:type zen/string}
                               :value {:type zen/any}}}
  :slicing {:rest {:type  zen/vector
                   :every {:type zen/map
                           :keys {:value {:type zen/string}}}}
            :slices {"kw"
                     {:filter {:engine :zen
                               :zen    {:type zen/map
                                        :keys {:kind {:const {:value "keyword"}}}}}
                      :schema {:type  zen/vector
                               :every {:type zen/map
                                       :keys {:value {:type zen/keyword}}}}}

                     "number"
                     {:filter {:engine :zen
                               :zen    {:type zen/map
                                        :keys {:kind {:const {:value "number"}}}}}
                      :schema {:type  zen/vector
                               :every {:type zen/map
                                       :keys {:value {:type zen/number}}}}}

                     "nested"
                     {:filter {:engine :zen
                               :zen    {:type zen/map
                                        :keys {:kind {:const {:value "nested"}}}}}

                      :schema {:type  zen/vector
                               :every {:type zen/map
                                       :keys {:value {:type zen/vector
                                                      :every {:type zen/map
                                                              :keys {:kind  {:type zen/string}
                                                                     :value {:type zen/any}}}
                                                      :slicing
                                                      {:slices
                                                       {"nest-kw"
                                                        {:filter {:engine :zen
                                                                  :zen    {:type zen/map
                                                                           :keys {:kind {:const {:value "keyword"}}}}}
                                                         :schema {:type  zen/vector
                                                                  :every {:type zen/map
                                                                          :keys {:value {:type zen/keyword}}}}}}}}}}}}

                     "map"
                     {:filter {:engine :zen
                               :zen    {:type zen/map
                                        :keys {:kind {:const {:value "map"}}}}}
                      :schema {:type  zen/vector
                               :every {:type zen/map
                                       :keys {:value {:type zen/map
                                                      :keys {:nested {:type zen/vector
                                                                      :every {:type zen/map
                                                                              :keys {:kind  {:type zen/string}
                                                                                     :value {:type zen/any}}}
                                                                      :slicing
                                                                      {:slices
                                                                       {"nest-kw"
                                                                        {:filter {:engine :zen
                                                                                  :zen    {:type zen/map
                                                                                           :keys {:kind {:const {:value "keyword"}}}}}
                                                                         :schema {:type  zen/vector
                                                                                  :every {:type zen/map
                                                                                          :keys {:value {:type zen/keyword}}}}}}}}}}}}}}}}}

 slicing-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "slicing tests"
  :steps
  [{:desc "valid data given"
    :do   {:type   zen.test/validate
           :schema slice-definition
           :data   [{:kind "keyword" :value :hello}
                    {:kind "keyword" :value :world}
                    {:kind "number" :value 1}
                    {:kind "foo"    :value "string"}
                    {:kind "map"
                     :value {:nested [{:kind "keyword" :value :world}
                                      {:kind "number" :value 1}]}}
                    {:kind "nested"
                     :value [{:kind "keyword" :value :world}
                             {:kind "number" :value 1}]}]}
    :match
    {:errors zen.test/empty?}}

   {:desc "invalid kw slice"
    :do   {:type   zen.test/validate
           :schema slice-definition
           :data   [{:kind "keyword" :value 1}]}
    :match
    {:errors
     [{:message "Expected type of 'keyword, got 'long"
       :type "keyword.type"
       :path [0 :value]
       :schema
       [zen.tests.slicing-test/slice-definition :slicing "kw" :every 0 :value :type]}]}}

   {:desc "invalid number slice"
    :do   {:type   zen.test/validate
           :schema slice-definition
           :data   [{:kind "number" :value "1"}]}
    :match
    {:errors
     [{:message "Expected type of 'number, got 'string"
       :type "number.type"
       :path [0 :value]
       :schema
       [zen.tests.slicing-test/slice-definition
        :slicing
        "number"
        :every
        0
        :value
        :type]}]}}

   {:desc "rest chunk of slice is invalid"
    :do   {:type   zen.test/validate
           :schema slice-definition
           :data   [{:kind "foo" :value 1}]}
    :match
    {:errors
     [{:message "Expected type of 'string, got 'long"
       :type "string.type"
       :path [0 :value]
       :schema
       [zen.tests.slicing-test/slice-definition
        :slicing
        :slicing/rest
        :every
        0
        :value
        :type]}]}}

   {:desc "invalid map slice"
    :do   {:type   zen.test/validate
           :schema slice-definition
           :data   [{:kind "map" :value {:nested [{:kind "keyword" :value "not keyword"}]}}]}
    :match
    {:errors [{:message "Expected type of 'keyword, got 'string"
               :type "keyword.type"
               :path [0 :value :nested 0 :value]
               :schema
               [zen.tests.slicing-test/slice-definition
                :slicing
                "map"
                :every
                0
                :value
                :nested
                :slicing
                "nest-kw"
                :every
                0
                :value
                :type]}]}}

   {:desc "invalid nested slice"
    :do   {:type   zen.test/validate
           :schema slice-definition
           :data   [{:kind "nested" :value [{:kind "keyword" :value "not keyword"}]}]}
    :match
    {:errors [{:message "Expected type of 'keyword, got 'string"
               :type "keyword.type"
               :path [0 :value 0 :value]
               :schema
               [zen.tests.slicing-test/slice-definition
                :slicing
                "nested"
                :every
                0
                :value
                :slicing
                "nest-kw"
                :every
                0
                :value
                :type]}]}}

   {:desc "slice attr has invalid value"
    :do   {:type   zen.test/validate
           :schema required-slice
           :data   [{:kind "two"}]}
    :match
    {:errors [{:message "Expected >= 1, got 0"
               :type "vector.minItems"
               :path []
               :schema
               [zen.tests.slicing-test/required-slice :slicing "one" :minItems]}]}}]}

 slicing-path-collision-unknown-key-bug-schema
 {:zen/tags #{zen/schema}
  :type zen/vector
  :every {:type zen/map :keys {:kind {:type zen/string}}}
  :slicing {:rest {:type  zen/vector
                   :every {:type zen/map
                           :keys {:rest-key {:type zen/any}}}}
            :slices {"slice"
                     {:filter {:engine :zen
                               :zen    {:type zen/map
                                        :keys {:kind {:const {:value "slice"}}}}}
                      :schema {:type  zen/vector
                               :every {:type zen/map
                                       :keys {:slice-key {:type zen/string}}}}}}}}

 slicing-path-collision-unknown-key-bug-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "slice definition contains collision between slice and rest"
  :steps [{:desc "valid data given"
           :do   {:type   zen.test/validate
                  :schema slicing-path-collision-unknown-key-bug-schema
                  :data   [{:kind "slice" :slice-key "kw-key"}
                           {:kind "rest" :rest-key "rest-key"}]}
           :match
           {:errors zen.test/empty?}}

          {:desc "kind: slice contains rest-key"
           :do   {:type   zen.test/validate
                  :schema slicing-path-collision-unknown-key-bug-schema
                  :data   [{:kind "rest" :rest-key "rest-key"}
                           {:kind "slice" :rest-key "kw-key"}
                           {:kind "slice" :slice-key :kw-key}]}
           :match
           {:errors [{:type "unknown-key"
                      :message "unknown key :rest-key"
                      :path [1 :rest-key]}

                     {:message "Expected type of 'string, got 'keyword"
                      :type "string.type"
                      :path [2 :slice-key]
                      :schema
                      [zen.tests.slicing-test/slicing-path-collision-unknown-key-bug-schema
                       :slicing
                       "slice"
                       :every
                       2
                       :slice-key
                       :type]}]}}]}

 match-engine-slicing
 {:zen/tags #{zen/schema}
  :type zen/vector
  :every {:type zen/map :keys {:kind {:type zen/string}}}
  :slicing {:rest {:type  zen/vector
                   :every {:type zen/map
                           :keys {:rest-key {:type zen/any}}}}
            :slices {"slice"
                     {:filter {:engine :match
                               :zen {:kind "slice"}}
                      :schema {:type  zen/vector
                               :every {:type zen/map
                                       :keys {:slice-key {:type zen/string}}}}}}}}

 match-engine-slicing-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "slice by zen.match"
  :steps
  [{:desc "valid data given"
    :do   {:type   zen.test/validate
           :schema slicing-path-collision-unknown-key-bug-schema
           :data   [{:kind "slice" :slice-key "kw-key"}
                    {:kind "rest" :rest-key :keyword}]}
    :match
    {:errors zen.test/empty?}}

   {:desc "valid data given"
    :do   {:type   zen.test/validate
           :schema slicing-path-collision-unknown-key-bug-schema
           :data   [{:kind "slice" :slice-key :keyword}
                    {:kind "rest" :rest-key :keyword}]}
    :match
    {:errors
     [{:message "Expected type of 'string, got 'keyword",
       :path [0 :slice-key],
       :type "string.type",
       :schema
       [zen.tests.slicing-test/slicing-path-collision-unknown-key-bug-schema
        :slicing
        "slice"
        :every
        0
        :slice-key
        :type]}]}}]}

 slice-key-check
 {:zen/tags #{zen/schema-fx zen/schema}
  :type     zen/vector
  :every    {:type zen/keyword}}

 zen-fx-slicing
 {:zen/tags #{zen/schema}
  :type zen/vector
  :every {:type zen/map :keys {:kind {:type zen/string}}}
  :slicing {:slices {"slice"
                     {:filter {:engine :zen-fx
                               :zen {:type zen/map
                                     :keys {:kind  {:type zen/string}
                                            :slice-key {:type zen/string}}
                                     slice-key-check [:slice-key]}}
                      :schema {:type  zen/vector
                               :minItems 1
                               :every {:type zen/map
                                       :keys {:slice-key {:type zen/string}}}}}}}}

 zen-fx-engine-slicing-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "slice by zen-fx"
  :steps
  [{:desc "valid data given"
    :do   {:type   zen.test/validate
           :schema zen-fx-slicing
           :data   [{:kind "slice" :slice-key "fx-value"}]}
    :match
    {:errors zen.test/empty?}}
   {:desc "invalid slice key value"
    :do   {:type   zen.test/validate
           :schema zen-fx-slicing
           :data   [{:kind "slice" :slice-key "wrong value"}]}
    :match
    {:errors
     [{:path [0 :slice-key]
       :type "unknown-key"
       :message "unknown key :slice-key"}

      {:message "Expected >= 1, got 0"
       :path []
       :type "vector.minItems"
       :schema
       [zen.tests.slicing-test/zen-fx-slicing :slicing "slice" :minItems]}]}}]}}
