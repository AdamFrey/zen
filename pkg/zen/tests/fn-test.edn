{:ns zen.tests.fn-test

 :import #{zen.test}

 fn {:zen/tags #{zen/tag}}

 other-fn {:zen/tags #{zen/fn}
           :args {:type zen/vector :every {:type zen/keyword}}
           :ret  {:type zen/string}}

 get {:zen/tags #{zen/fn fn}
      :args {:type zen/vector :every {:type zen/keyword}}
      :ret  {:type zen/string}}

 tpl {:zen/tags  #{zen/schema zen/tag}
      :type zen/map
      :keys {:path {:type zen/apply :tags #{fn}}}}

 example {:zen/tags #{tpl}
          :path (get :a :b :c)}

 fn-tests
 {:zen/tags #{zen.test/case}
  :title "Fn validation"
  :only-for #{:v2}
  :steps
  [{:desc "invalid zen/apply type"
    :do {:type zen.test/validate :schema tpl :data {:path "1"}}
    :match
    {:errors [{:type "apply.type"
               :path [:path]
               :message "Expected fn call '(fn-name args-1 arg-2), got 'string"
               :schema [zen.tests.fn-test/tpl #_:keys :path]}]}}

   {:desc "tpl schema does not contain required tags"
    :do {:type zen.test/validate
         :schema tpl
         :data {:path (zen.tests.fn-test/tpl "1")}}
    :match
    {:errors [{:message
               "fn definition 'zen.tests.fn-test/tpl should be tagged with 'zen/fn, but '#{zen/tag zen/schema}"
               :type "apply.fn-tag"
               :path [:path]
               :schema [zen.tests.fn-test/tpl :path :apply]}

              {:type "apply.fn-tag"
               :message
               "Expected symbol 'zen.tests.fn-test/tpl tagged with '#{zen.tests.fn-test/fn}, but only #{zen/tag zen/schema}"
               :path [:path]
               :schema [zen.tests.fn-test/tpl #_:keys :path :tags]}]}}

   {:desc "other-fn is not tagged with fn tag"
    :do {:type zen.test/validate
         :schema tpl
         :data {:path (zen.tests.fn-test/other-fn "1")}}
    :match
    {:errors [{:message "Expected type of 'keyword, got 'string"
               :type "keyword.type"
               :path [:path 0]
               :schema [zen.tests.fn-test/tpl :path zen.tests.fn-test/other-fn :args :every 0 :type]}

              {:type "apply.fn-tag"
               :path [:path]
               :message
               "Expected symbol 'zen.tests.fn-test/other-fn tagged with '#{zen.tests.fn-test/fn}, but only #{zen/fn}"
               :schema [zen.tests.fn-test/tpl #_:keys :path :tags]}]}}

   {:desc "fn args are invalid"
    :do {:type zen.test/validate
         :schema tpl
         :data {:path (zen.tests.fn-test/get "1")}}
    :match
    {:errors [{:type "keyword.type"
               :message "Expected type of 'keyword, got 'string"
               :path [:path 0]
               :schema [zen.tests.fn-test/tpl #_:keys :path zen.tests.fn-test/get :args :every 0 :type]}]}}

   {:desc "valid data given"
    :do {:type zen.test/validate
         :schema tpl
         :data {:path (zen.tests.fn-test/get :test :passed)}}
    :match
    {:errors zen.test/empty?}}]}}
