{:ns zen.tests.key-schema-test
 :import #{zen.test}

 my-key
 {:zen/tags #{zen/tag}}

 a-key
 {:zen/tags #{zen/schema my-key}
  :for #{:route-b :route-a}
  :type zen/vector
  :every {:type zen/number}}

 b-key
 {:zen/tags #{zen/schema my-key}
  :type zen/map
  :for #{:route-b}
  :keys {:c-key {:type zen/string}}}

 extra-key
 {:zen/tags #{zen/schema my-key}
  :for #{:never-dispatched}
  :fail "this key should not be selected"}

 global-key
 {:zen/tags #{zen/schema my-key}
  :type zen/vector
  :every {:type zen/string}}

 namespaced-key
 {:zen/tags #{zen/schema my-key}
  :type zen/string
  :key-name :my-custom-key-ns/my-custom-key}

 my-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:dispatch {:type zen/keyword}}
  :key-schema {:tags #{my-key} :key :dispatch}}

 another-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :key-schema {:tags #{not-found}}}

 key-schema-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "key-schema dispatch tests"
  :steps
  [{:desc "valid data given"
    :do {:type zen.test/validate
         :schema my-schema
         :data {:dispatch :route-b
                :a-key [1 2 3 16]
                :b-key {:c-key "just a string"}}}
    :match {:errors zen.test/empty?}}

   {:desc "global key is validated"
    :do {:type zen.test/validate
         :schema my-schema
         :data {:dispatch :route-a
                :a-key [1 2 3]
                :global-key ["string-a" "string-b"]}}
    :match {:errors zen.test/empty?}}

   {:desc "a-key is invalid"
    :do {:type zen.test/validate
         :schema my-schema
         :data {:dispatch :route-a
                :a-key 'wrong-value}}
    :match
    {:errors
     [{:message "Expected type of 'vector, got 'symbol",
       :path [:a-key],
       :type "vector.type",
       :schema [zen.tests.key-schema-test/my-schema :a-key :type]}]}}

   {:desc "c-key is invalid"
    :do {:type zen.test/validate
         :schema my-schema
         :data {:dispatch :route-b
                :b-key {:c-key 'wrong-value}}}
    :match
    {:errors
     [{:message "Expected type of 'string, got 'symbol",
       :path [:b-key :c-key],
       :type "string.type",
       :schema [zen.tests.key-schema-test/my-schema :b-key :c-key :type]}]}}

   {:desc "namespaced key is valid"
    :do {:type zen.test/validate
         :schema my-schema
         :data {:dispatch :doesntmatter
                :my-custom-key-ns/my-custom-key "should work"}}
    :match {:errors zen.test/empty?}}

   {:desc "namespaced key is invalid"
    :do {:type zen.test/validate
         :schema my-schema
         :data {:dispatch :doesntmatter
                :my-custom-key-ns/my-custom-key :should-not-work}}
    :match {:errors [{:path [:my-custom-key-ns/my-custom-key nil]}
                     nil]}}

   {:desc "extra key is provided"
    :do {:type zen.test/validate
         :schema my-schema
         :data {:dispatch :route-a
                :extra-key "extra-value"}}
    :match {:errors [{:path [:extra-key],
                      :type "unknown-key",
                      :message "unknown key :extra-key"}]}}

   {:desc "tag not found"
    :do {:type zen.test/validate
         :schema another-schema
         :data {:extra-key "extra-value"}}
    :match {:errors [{:path [:extra-key],
                      :type "unknown-key",
                      :message "unknown key :extra-key"}]}}]}}
