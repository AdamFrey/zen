{ns zen.tests.core-validate-test

 import #{zen.test}

 keys-with-different-types
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:keyword {:type zen/keyword}
         "string" {:type zen/string}}}

 validate-sort-by-error-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title    "zen.core/validate sort-by class cast error"
  :steps
  [{:desc "valid data given"
    :do {:type zen.test/validate
         :schema keys-with-different-types
         :data {:keyword :k
                "string" "s"}}
    :match {:errors zen.test/empty?}}

   {:desc "invalid data given"
    :do {:type zen.test/validate
         :schema keys-with-different-types
         :data {:keyword "s"
                "string" :k}}
    :match {:errors
            [{:message "Expected type of 'string, got 'keyword",
              :path ["string"],
              :type "string.type",
              :schema
              [zen.tests.core-validate-test/keys-with-different-types "string" :type]}

             {:message "Expected type of 'keyword, got 'string",
              :path [:keyword],
              :type "keyword.type",
              :schema
              [zen.tests.core-validate-test/keys-with-different-types :keyword :type]}]}}]}

 bad-schema
 {:zen/tags #{zen/schema}
  :invalid-key :should-be-error-on-load}

 good-schema
 {:zen/tags #{zen/schema}
  :type zen/any}

 invalid-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a-key 420}}

 bad-schema-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "checks zen schemas for errors"
  :steps [{:desc ":keys instruction is invalid"
           :do {:type zen.test/validate-schema
                :schema invalid-schema}
           :match
           {:errors
            [{:message "Expected type of 'map, got 'long"
              :path [:keys :a-key]
              :type "map.type"
              :schema
              [zen/schema
               :schema-key
               zen/map
               :keys
               :values
               :confirms
               zen/schema
               :type]}]}}

          {:desc "Schema contains invalid key"
           :do {:type zen.test/validate-schema
                :schema bad-schema}
           :match
           {:errors
            [{:path [:invalid-key]
              :message "unknown key :invalid-key"
              :type "unknown-key"}]}}

          {:desc "Schema is correct"
           :do {:type zen.test/validate-schema
                :schema good-schema}
           :match {:errors zen.test/empty?}}]}

 not-schema
 {}

 schema-with-bad-confirms
 {:zen/tags #{zen/schema}
  :confirms #{not-schema}}

 some-schema
 {:zen/tags #{zen/schema}
  :type zen/map}

 schema-with-good-confirms
 {:zen/tags #{zen/schema}
  :confirms #{some-schema}}

 bad-confirms-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "each element of :confirms should be tagged as zen/schema"
  :steps [{:desc "Confirms contains schema without schema tag"
           :do {:type zen.test/validate-schema
                :schema schema-with-bad-confirms}
           :match
           {:errors
            [{:type "symbol"
              :message "Expected symbol 'zen.tests.core-validate-test/not-schema tagged with '#{zen/schema}, but only #{}"
              :path [:confirms 0]
              :schema [zen/schema :confirms :every 0 :tags]}]}}

          {:desc "Confirms contains schema with schema tag"
           :do {:type zen.test/validate-schema
                :schema schema-with-good-confirms}
           :match {:errors zen.test/empty?}}]}

 mykey
 {:zen/tags #{zen/schema zen/property}
  :type zen/string}

 props-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :zen/desc "just a desc"
  :keys {:a {:zen/desc "just a key desc"
             :type zen/string}}}

 props-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "props are validated both for schema and data validation"
  :steps [{:desc "zen/desc prop is validated correctly"
           :do {:type zen.test/validate-schema
                :schema props-schema}
           :match
           {:errors zen.test/empty?}}

          {:desc "provided mykey prop is correct"
           :do {:type zen.test/validate
                :schema props-schema
                :data {:zen.tests.core-validate-test/mykey "just a prop"
                       :a "yet another string"}}
           :match
           {:errors zen.test/empty?}}

          {:desc "provided mykey prop is incorrect"
           :do {:type zen.test/validate
                :schema props-schema
                :data {:zen.tests.core-validate-test/mykey "just a prop"
                       :a 420}}
           :match
           {:errors
            [{:message "Expected type of 'string, got 'long"
              :path [:a]
              :type "string.type"
              :schema [zen.tests.core-validate-test/props-schema :a :type]}]}}]}}
