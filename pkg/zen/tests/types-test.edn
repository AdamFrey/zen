{:ns zen.tests.types-test

 :import #{zen.test}

 any-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/any}}}

 any-type-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "any values pass the test"
  :steps
  [{:desc "string passes the test"
    :do {:type zen.test/validate :schema any-schema :data {:a "12345"}}
    :match {:errors zen.test/nil?}}

   {:desc "integer passes the test"
    :do {:type zen.test/validate :schema any-schema :data {:a 420}}
    :match {:errors zen.test/nil?}}]}

 boolean-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/boolean}}}

 boolean-tests
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Boolean validations in map"
  :steps
  [{:desc "fails on string"
    :do {:type zen.test/validate :schema boolean-schema :data {:a "abc"}}
    :match
    {:errors
     [{:path [:a]
       :type "boolean.type"
       :message "Expected type of 'boolean, got 'string"
       :schema [boolean-schema :a]}]}}

   {:desc "Valid boolean was given"
    :do {:type zen.test/validate :schema boolean-schema :data {:a true}}
    :match
    {:errors zen.test/nil?}}]}

 keyword-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/keyword}}}

 keyword-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Keyword validations in map"
  :steps
  [{:desc "fails on string"
    :do {:type zen.test/validate :schema keyword-schema :data {:a "abc"}}
    :match
    {:errors
     [{:path [:a]
       :type "keyword.type"
       :message "Expected type of 'keyword, got 'string"
       :schema [keyword-schema :a]}]}}

   {:desc "Valid keyword was given"
    :do {:type zen.test/validate :schema keyword-schema :data {:a :abc}}
    :match
    {:errors zen.test/nil?}}]}

 symbol-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/symbol}}}

 SomeSymbol
 {}

 symbol-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Symbol validations in map"
  :steps
  [{:desc "given value has invalid type"
    :do {:type zen.test/validate :schema symbol-schema :data {:a "abc"}}
    :match
    {:errors
     [{:path [:a]
       :type "symbol.type"
       :message "Expected type of 'symbol, got 'string"
       :schema [symbol-schema :a]}]}}

   {:desc "Valid symbol was given"
    :do {:type zen.test/validate :schema symbol-schema :data {:a SomeSymbol}}
    :match
    {:errors zen.test/nil?}}]}

 date-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/date}}}

 date-tests
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Date validations in map"
  :steps
  [{:desc "invalid data - integer is provided"
    :do {:type zen.test/validate
         :schema date-schema
         :data {:a 42}}
    :match
    {:errors
     [{:path [:a]
       :type "date.type"
       :message "Expected type of 'date, got 'long"
       :schema [date-schema :a :type]}]}}

   {:desc "invalid data - string provided"
    :do {:type zen.test/validate
         :schema date-schema
         :data {:a "not a date at all"}}
    :match
    {:errors
     [{:path [:a]
       :type "date.type"
       :message "Expected type of 'date, got 'string"
       :schema [date-schema #_:keys :a :type]}]}}

   {:desc "invalid data - 00 day"
    :do {:type zen.test/validate
         :schema date-schema
         :data {:a "2021-00-06"}}
    :match
    {:errors [{:path [:a]
               :type "date.type"
               :message "Expected type of 'date, got 'string"
               :schema [date-schema #_:keys :a :type]}]}}

   {:desc "invalid data - 33 day"
    :do {:type zen.test/validate
         :schema date-schema
         :data {:a "2021-33-06"}}
    :match
    {:errors
     [{:path [:a]
       :type "date.type"
       :message "Expected type of 'date, got 'string"
       :schema [date-schema #_:keys :a :type]}]}}

   {:desc "invalid data - 00 month"
    :do {:type zen.test/validate
         :schema date-schema
         :data {:a "2021-06-00"}}
    :match
    {:errors
     [{:path [:a]
       :type "date.type"
       :message "Expected type of 'date, got 'string"
       :schema [date-schema #_:keys :a :type]}]}}

   {:desc "invalid data - 44 month"
    :do {:type zen.test/validate
         :schema date-schema
         :data {:a "2021-06-44"}}
    :match
    {:errors
     [{:path [:a]
       :type "date.type"
       :message "Expected type of 'date, got 'string"
       :schema [date-schema #_:keys :a :type]}]}}

   {:desc "valid date given"
    :do {:type zen.test/validate :schema date-schema :data {:a "2021-08-06"}}
    :match
    {:errors zen.test/empty?}}]}

 datetime-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/datetime}}}

 datetime-tests
 {:zen/tags #{zen.test/case}
  :title "date time validation in zen/map"
  :only-for #{:v2}
  :steps
  [{:desc "invalid data - integer is provided"
    :do {:type zen.test/validate
         :schema datetime-schema
         :data {:a 42}}
    :match
    {:errors
     [{:path [:a]
       :type "datetime.type"
       :message "Expected type of 'datetime, got 'long"
       :schema [datetime-schema :a :type]}]}}

   {:desc "invalid data - hour equals 25"
    :do {:type zen.test/validate :schema date-schema :data {:a "2021-09-06T25:17:42z"}}
    :match
    {:errors
     [{:path [:a]
       :message "Expected type of 'date, got 'string"
       :type "date.type"
       :schema [date-schema :a :type]}]}}

   {:desc "invalid data - minute char is greater than 59"
    :do {:type zen.test/validate
         :schema date-schema
         :data {:a "2021-09-06T19:77:42z"}}
    :match
    {:errors
     [{:path [:a]
       :type "date.type"
       :message "Expected type of 'date, got 'string"
       :schema [date-schema #_:keys :a :type]}]}}

   {:desc "invalid data - second char is greater than 59"
    :do {:type zen.test/validate
         :schema date-schema
         :data {:a "2021-09-06T19:17:99z"}}
    :match
    {:errors
     [{:path [:a]
       :type "date.type"
       :message "Expected type of 'date, got 'string"
       :schema [date-schema #_:keys :a :type]}]}}

   {:desc "valid datetime given"
    :do {:type zen.test/validate
         :schema datetime-schema
         :data {:a "2021-08-06T19:17:42Z"}}
    :match
    {:errors zen.test/empty?}}

   ;; fhir regex does not allow lowercase timezone
   #_{:desc "Valid keyword with all cases"
      :do {:type zen.test/validate :schema datetime-schema :data {:a "2021-08-06t19:17:42z"}}
      :match
      {:errors zen.test/nil?}}]}

 myTag
 {:zen/tags #{zen/tag}}

 ex-schema
 {:zen/tags #{zen/schema}}

 tags-check-schema
 {:zen/tags #{zen/schema myTag}}

 string-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/string
             :minLength 4
             :maxLength 6
             :regex "[0-9].+"}

         :b {:type zen/string
             :tags #{myTag}}

         :c {:type zen/string
             :fail "not supported yet"}}}

 string-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "String validations in map"
  :steps
  [{:desc "valid schema string passed for tags check"
    :do {:type zen.test/validate
         :schema string-schema
         :data {:b "zen.tests.types-test/tags-check-schema"}}
    :match
    {:errors zen.test/empty?}}

   {:desc "invalid schema string passed for tags check"
    :do {:type zen.test/validate
         :schema string-schema
         :data {:b "just a random value"}}
    :match
    {:errors
     [{:message "No symbol 'just a random value found"
       :type "string"
       :path [:b]
       :schema [zen.tests.types-test/string-schema :b :tags]}]}}

   {:desc "schema is not tagged with myTag"
    :do {:type zen.test/validate
         :schema string-schema
         :data {:b "zen.tests.types-test/ex-schema"}}
    :match
    {:errors
     [{:message
       "Expected symbol 'zen.tests.types-test/ex-schema tagged with '#{zen.tests.types-test/myTag}, but only #{zen/schema}"
       :type "string"
       :path [:b]
       :schema [zen.tests.types-test/string-schema :b :tags]}]}}

   {:desc "fails if boolean is provided"
    :do {:type zen.test/validate :schema string-schema :data {:a false}}
    :match
    {:errors [{:path [:a]
               :message "Expected type of 'string, got 'boolean"
               :type "string.type"
               :schema [string-schema :a]}]}}

   {:desc "given string length is below :minLength"
    :do {:type zen.test/validate
         :schema string-schema
         :data {:a "420"}}
    :match
    {:errors [{:path [:a]
               :type "string.minLength"
               :message "Expected length >= 4, got 3"
               :schema [string-schema :a :minLength]}]}}

   {:desc "given string length is above :maxLength"
    :do {:type zen.test/validate
         :schema string-schema
         :data {:a "420 420 420"}}
    :match
    {:errors [{:path [:a]
               :type "string.maxLength"
               :message "Expected length <= 6, got 11"
               :schema [string-schema :a :maxLength]}]}}

   {:desc "given string doesn't match to given :regex"
    :do {:type zen.test/validate
         :schema string-schema
         :data {:a "abcde"}}
    :match
    {:errors [{:path [:a]
               :type "string.regex"
               :message "Expected match /[0-9].+/, got \"abcde\""
               :schema [string-schema :a :regex]}]}}

   {:desc "fail rule returns string"
    :do {:type zen.test/validate
         :schema string-schema
         :data {:c "123"}}
    :match
    {:errors
     [{:message "not supported yet"
       :path [:c]
       :schema [zen.tests.types-test/string-schema :c :fail]}]}}

   {:desc "Valid string was given"
    :do {:type zen.test/validate :schema string-schema :data {:a "12345"}}
    :match
    {:errors zen.test/nil?}}]}

 integer-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/integer
             :min 2
             :max 4}}}

 ;; TODO fails on v1 because it returns string not integer
 integer-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Integer validations in map"
  :steps
  [{:desc "fails on boolean"
    :do {:type zen.test/validate :schema integer-schema :data {:a false}}
    :match
    {:errors [{:path [:a]
               :type "integer.type"
               :message "Expected type of 'integer, got 'boolean"
               :schema [integer-schema :a]}]}}

   {:desc "given value is above :max"
    :do {:type zen.test/validate :schema integer-schema :data {:a 5}}
    :match
    {:errors
     [{:path [:a]
       :type "integer.max"
       :message "Expected <= 4, got 5"
       :schema [integer-schema :a :max]}]}}

   {:desc "given value is below :min"
    :do {:type zen.test/validate :schema integer-schema :data {:a 1}}
    :match
    {:errors
     [{:path [:a]
       :type "integer.min"
       :message "Expected >= 2, got 1"
       :schema [integer-schema :a :min]}]}}

   {:desc "Valid integer was given"
    :do {:type zen.test/validate :schema integer-schema :data {:a 3}}
    :match
    {:errors zen.test/nil?}}]}

 number-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/number
             :min 1.1
             :max 3.3}}}

 constraints-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/number
             :scale 2}
         :b {:type zen/number
             :precision 3}
         :c {:type zen/number
             :precision 3
             :scale 2}
         :d {:type zen/number
             :precision 3
             :scale 0}}}

;; TODO fails on v1 because it returns string not integer
 number-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Number validations in map"
  :steps
  [{:desc "fails on boolean"
    :do {:type zen.test/validate :schema number-schema :data {:a false}}
    :match
    {:errors
     [{:path [:a]
       :type "number.type"
       :message "Expected type of 'number, got 'boolean"
       :schema [number-schema :a]}]}}

   {:desc "Checks if given value is above :max"
    :do {:type zen.test/validate :schema number-schema :data {:a 4.4}}
    :match
    {:errors
     [{:path [:a]
       :type "number.max"
       :message "Expected <= 3.3, got 4.4"
       :schema [number-schema :a :max]}]}}

   {:desc "Checks if given value is below :min"
    :do {:type zen.test/validate :schema number-schema :data {:a 0.7}}
    :match
    {:errors
     [{:path [:a]
       :type "number.min"
       :message "Expected >= 1.1, got 0.7"
       :schema [number-schema :a :min]}]}}

   {:desc "Valid number was given"
    :do {:type zen.test/validate :schema number-schema :data {:a 2.2}}
    :match
    {:errors zen.test/nil?}}

   {:desc "scale constraint invalid"
    :do {:type zen.test/validate :schema constraints-schema :data {:a 2}}
    :match
    {:errors
     [{:message "Expected scale = 2, got 0"
       :path [:a]
       :type "number.scale"
       :schema [zen.tests.types-test/constraints-schema :a :scale]}]}}

   {:desc "scale constraint valid"
    :do {:type zen.test/validate :schema constraints-schema :data {:a 2.28}}
    :match
    {:errors zen.test/empty?}}

   {:desc "precision constraint invalid"
    :do {:type zen.test/validate :schema constraints-schema :data {:b 224.2}}
    :match
    {:errors [{:message "Expected precision = 3, got 4"
               :path [:b]
               :type "number.precision"
               :schema [zen.tests.types-test/constraints-schema :b :precision]}]}}

   {:desc "precision valid"
    :do {:type zen.test/validate :schema constraints-schema :data {:b 2.28}}
    :match
    {:errors zen.test/empty?}}

   {:desc "precision valid"
    :do {:type zen.test/validate :schema constraints-schema :data {:b 22.4}}
    :match
    {:errors zen.test/empty?}}

   {:desc "precision is 4, expected 3"
    :do {:type zen.test/validate :schema constraints-schema :data {:c 22.22}}
    :match
    {:errors [{:message "Expected precision = 3, got 4"
               :path [:c]
               :type "number.precision"
               :schema [zen.tests.types-test/constraints-schema :c :precision]}]}}

   {:desc "valid precision 3 and scale 2"
    :do {:type zen.test/validate :schema constraints-schema :data {:c 2.22}}
    :match
    {:errors zen.test/empty?}}

   {:desc "trailing zeroes are allowed when scale = 2 (4 zeroes)"
    :do {:type zen.test/validate :schema constraints-schema :data {:c 22.0000}}
    :match
    {:errors zen.test/empty?}}

   {:desc "trailing zeroes are allowed when scale = 2 (2 zeroes)"
    :do {:type zen.test/validate :schema constraints-schema :data {:c 2.00}}
    :match
    {:errors zen.test/empty?}}

   {:desc "precision is 5 instead of 3"
    :do {:type zen.test/validate :schema constraints-schema :data {:c 2222.0}}
    :match
    {:errors
     [{:message "Expected precision = 3, got 5"
       :path [:c]
       :type "number.precision"
       :schema [zen.tests.types-test/constraints-schema :c :precision]}]}}

   {:desc "scale equals 0, valid data"
    :do {:type zen.test/validate :schema constraints-schema :data {:d 222}}
    :match
    {:errors zen.test/empty?}}

   {:desc "scale equals 0, invalid data"
    :do {:type zen.test/validate :schema constraints-schema :data {:d 2222}}
    :match
    {:errors [{:message "Expected precision = 3, got 4",
               :path [:d],
               :type "number.precision",
               :schema [zen.tests.types-test/constraints-schema :d :precision]}]}}]}

 regex-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/regex}}}

 regex-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Regex validations in map"
  :steps
  [{:desc "fails on boolean"
    :do {:type zen.test/validate :schema regex-schema :data {:a false}}
    :match
    {:errors
     [{:path [:a]
       :type "regex.type"
       :message "Expected type of 'regex, got 'boolean"
       :schema [regex-schema :a]}]}}

   {:desc "Valid regex ws give"
    :do {:type zen.test/validate :schema regex-schema :data {:a ".+"}}
    :match
    {:errors zen.test/nil?}}]}

 vector-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/vector
             :minItems 4
             :maxItems 6}}}

 vector-schema-every
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/vector
             :every {:type zen/string
                     :regex "hello"}}}}

 vector-test ;; TODO :schema-index validation
 {:zen/tags #{zen.test/case}
  :title "Vector validations in map"
  :only-for #{:v2}
  :steps
  [{:desc "fails on boolean"
    :do {:type zen.test/validate :schema vector-schema :data {:a false}}
    :match
    {:errors
     [{:path [:a]
       :type "vector.type"
       :schema [vector-schema :a]}]}}

   {:desc "fewer values in given vector than was defined in :minItems"
    :do {:type zen.test/validate :schema vector-schema :data {:a [1 2 3]}}
    :match
    {:errors
     [{:path [:a]
       :type "vector.minItems"
       :message "Expected >= 4, got 3"
       :schema [vector-schema :a :minItems]}]}}

   {:desc "more values in given vector than was defined in :maxItems"
    :do {:type zen.test/validate :schema vector-schema :data {:a [1 2 3 4 5 6 7]}}
    :match
    {:errors
     [{:path [:a]
       :type "vector.maxItems"
       :message "Expected <= 6, got 7"
       :schema [vector-schema :a :maxItems]}]}}

   {:desc "validate every element in vector with regexp"
    :do {:type zen.test/validate
         :schema vector-schema-every
         :data {:a ["hello" "hello" "hello" "unknown"]}}
    :match
    {:errors
     [{:type "string.regex"
       :path [:a 3]
       :schema
       [vector-schema-every :a :every 3 :regex]}]}}

   {:desc "Validate every value in collection"
    :do {:type zen.test/validate
         :schema vector-schema-every
         :data {:a ["hello" "hello" "hello"]}}
    :match {:errors zen.test/nil?}}

   {:desc "Valid vector was given"
    :do {:type zen.test/validate :schema vector-schema :data {:a [1 2 3 4 5]}}
    :match
    {:errors zen.test/nil?}}]}

 vector-schema-index
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/vector
             :schema-index {:index 0 :ns "zen.tests.types-test"}}}}

 vector-fn-first-string-is-hello
 {:zen/tags #{zen/schema}
  :type zen/vector
  :nth {1 {:type zen/string
           :regex "hello"}}}

 vector-schema-key&nth-validation
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "resolve schema by index"
  :steps
  [{:desc "invalid string provided"
    :do {:type zen.test/validate
         :schema vector-schema-index
         :data {:a [vector-fn-first-string-is-hello "abc"]}}
    :match {:errors
            [{:type "string.regex"
              :path [:a 1]
              :message "Expected match /hello/, got \"abc\""
              :schema
              [zen.tests.types-test/vector-schema-index
               :a
               :schema-index
               zen.tests.types-test/vector-fn-first-string-is-hello
               :nth
               1
               :regex]}]}}

   {:desc "valid string provided"
    :do {:type zen.test/validate
         :schema vector-schema-index
         :data {:a [vector-fn-first-string-is-hello "hello"]}}
    :match {:errors zen.test/nil?}}]}

 list-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/list
             :minItems 4
             :maxItems 6}
         :b {:type zen/list
             :nth {0 {:type zen/number}
                   1 {:type zen/symbol}}}}}

 ;; TODO implement is-key extension for list expr
 ;; validate expr against expr-schema
 expr
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:user {:type zen/string}
         :list-value {:const {:value (print hello user zen.test/empty?)}}}}

 list-every
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/list
             :every {:type zen/string
                     :regex "hello"}}}}

 list-test ;; TODO :schema-index validation
 {:zen/tags #{zen.test/case}
  :title "List validations in map"
  :only-for #{:v2}
  :steps
  [{:desc "fails on boolean instead of list"
    :do {:type zen.test/validate :schema list-schema :data {:a false}}
    :match
    {:errors
     [{:path [:a]
       :type "list.type"
       :message "Expected type of 'list, got 'boolean"
       :schema [list-schema :a]}]}}

   {:desc "fewer values in given list than was defined in :minItems"
    :do {:type zen.test/validate :schema list-schema :data {:a (1 2 3)}}
    :match
    {:errors
     [{:path [:a]
       :type "list.minItems"
       :message "Expected >= 4, got 3"
       :schema [list-schema :a :minItems]}]}}

   {:desc "fewer values in given list then was defined in :maxItems"
    :do {:type zen.test/validate :schema list-schema :data {:a (1 2 3 4 5 6 7)}}
    :match
    {:errors
     [{:path [:a]
       :type "list.maxItems"
       :message "Expected <= 6, got 7"
       :schema [list-schema :a :maxItems]}]}}

   {:desc "Invalid list for :every check"
    :do {:type zen.test/validate :schema list-every :data {:a ("beta" "ceta")}}
    :match
    {:errors
     [{:path [:a 0]
       :schema [list-every :a :every 0 :regex]
       :type "string.regex"}
      {:path [:a 1]
       :schema [list-every :a :every 1 :regex]
       :type "string.regex"}]}}

   {:desc "Valid coll for :every check"
    :do {:type zen.test/validate
         :schema list-every
         :data {:a ("hello" "hello" "hello")}}
    :match {:errors zen.test/nil?}}

   {:desc "Valid vector was given"
    :do {:type zen.test/validate
         :schema list-schema
         :data {:a (1 2 3 4 5)}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Valid vector was given"
    :do {:type zen.test/validate
         :schema list-schema
         :data {:a (2 3 4 5)}}
    :match
    {:errors zen.test/nil?}}

   {:desc "nth is bounds safe"
    :do {:type zen.test/validate
         :schema list-schema
         :data {:b (1)}}
    :match
    {:errors zen.test/nil?}}]}

 set-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/set
             :minItems 4
             :maxItems 6
             :every {:type zen/integer}}}}

 set-schema+subset
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/set
             :subset-of #{2 3 4}}}}

 set-schema+superset
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:a {:type zen/set
             :superset-of #{0 1 2 3 4 5 6}}}}

 set-test
 {:zen/tags #{zen.test/case}
  :title "Set validations in map"
  :only-for #{:v2}
  :steps
  [{:desc "fails on boolean"
    :do {:type zen.test/validate :schema set-schema :data {:a false}}
    :match
    {:errors
     [{:path [:a]
       :type "set.type"
       :message "Expected type of 'set, got 'boolean"
       :schema [set-schema :a]}]}}

   {:desc "some values are of wrong type"
    :do {:type zen.test/validate
         :schema set-schema
         :data {:a #{"a" 2 "b" 4}}}
    :match
    {:errors
     [{:path [:a "a"]
       :type "integer.type"
       :schema [set-schema :a :every "a" :type]}
      {:path [:a "b"]
       :type "integer.type"
       :schema [set-schema :a :every "b" :type]}]}}

   {:desc "fewer values in given set than was defined in :minItems"
    :do {:type zen.test/validate
         :schema set-schema
         :data {:a #{1 2 3}}}
    :match
    {:errors [{:path [:a]
               :type "set.minItems"
               :message "Expected >= 4, got 3"
               :schema [set-schema :a :minItems]}]}}

   {:desc "more values in given list than was defined in :maxItems"
    :do {:type zen.test/validate
         :schema set-schema
         :data {:a #{1 2 3 4 5 6 7}}}
    :match
    {:errors [{:path [:a]
               :type "set.maxItems"
               :message "Expected <= 6, got 7"
               :schema [set-schema :a :maxItems]}]}}

   {:desc "given set is a subset of :subset-of"
    :do {:type zen.test/validate
         :schema set-schema+subset
         :data {:a #{1 2 3 4 5}}}
    :match
    {:errors
     [{:path [:a]
       :type "set"
       :schema [set-schema+subset :a :subset-of]}]}}

   {:desc "given set is a superset of :superset-of"
    :do {:type zen.test/validate
         :schema set-schema+superset
         :data {:a #{1 2 3 4 5}}}
    :match
    {:errors
     [{:path [:a]
       :type "set"
       :schema [set-schema+superset :a :superset-of]}]}}

   {:desc "Valid simple set was given"
    :do {:type zen.test/validate :schema set-schema :data {:a #{1 2 3 4 5}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Given set is equal to :subset-of set"
    :do {:type zen.test/validate :schema set-schema+subset :data {:a #{2 3 4}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Given set intersects to :subset-of set by bounds only"
    :do {:type zen.test/validate :schema set-schema+subset :data {:a #{2 4}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Given set is narrower than :subset-of"
    :do {:type zen.test/validate :schema set-schema+subset :data {:a #{3}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Given EMPTY set is also the subset of :subset-of"
    :do {:type zen.test/validate :schema set-schema+subset :data {:a #{}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Given set is equal to :superset-of set"
    :do {:type zen.test/validate :schema set-schema+superset :data {:a #{0 1 2 3 4 5 6}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Given set is wider the :superset-of set"
    :do {:type zen.test/validate :schema set-schema+superset :data {:a #{-1 0 1 2 3 4 5 6 7}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Given set intersects with :superset-of by right bound"
    :do {:type zen.test/validate :schema set-schema+superset :data {:a #{-1 0 1 2 3 4 5 6}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "Given set intersects with :superset-of by left bound"
    :do {:type zen.test/validate :schema set-schema+superset :data {:a #{0 1 2 3 4 5 6 7}}}
    :match
    {:errors zen.test/nil?}}]}

 const-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:age {:type zen/integer}}
  :const {:value {:age 42}}}

 str-const-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:str-key {:const {:value "str-value"}}}}

 ;; TODO add test when const is primitive type
 const-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "const validations in map"
  :steps
  [{:desc ":str-key has number type"
    :do {:type zen.test/validate :schema str-const-schema :data {:str-key 1}}
    :match
    {:errors
     [{:message "Expected 'str-value', got '1'",
       :type "schema",
       :path [:str-key],
       :schema [zen.tests.types-test/str-const-schema :str-key :const]}]}}

   {:desc ":str-key has number type"
    :do {:type zen.test/validate :schema str-const-schema :data {:str-key "str-value"}}
    :match
    {:errors zen.test/empty?}}

   {:desc "given map does not contain the key"
    :do {:type zen.test/validate :schema const-schema :data {}}
    :match
    {:errors
     [{:path []
       :type "schema"
       :message "Expected '{:age 42}', got '{}'"
       :schema [const-schema]}]}}

   {:desc "given map has wrong value type"
    :do {:type zen.test/validate :schema const-schema :data {:age "a lot"}}
    :match
    {:errors
     [{:message "Expected type of 'integer, got 'string",
       :path [:age],
       :type "integer.type",
       :schema [zen.tests.types-test/const-schema :age :type]}
      {:path []
       :type "schema"
       :message "Expected '{:age 42}', got '{:age \"a lot\"}'"
       :schema [const-schema]}]}}

   {:desc "Checks if giving map holds wrong value"
    :do {:type zen.test/validate :schema const-schema :data {:age 11}}
    :match
    {:errors
     [{:path []
       :type "schema"
       :message "Expected '{:age 42}', got '{:age 11}'"
       :schema [const-schema]}]}}

   {:desc "Valis data given"
    :do {:type zen.test/validate :schema const-schema :data {:age 42}}
    :match
    {:errors zen.test/nil?}}]}

 enums-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:gender {:type zen/string
                  :enum [{:value "Female"}
                         {:value "Male"}]}}}

 enums-test
 {:zen/tags #{zen.test/case}
  :title "enums validations in map"
  :only-for #{:v2}
  :steps
  [{:desc "given map has integer value"
    :do {:type zen.test/validate :schema enums-schema :data {:gender 42}}
    :match
    {:errors
     [{:path [:gender]
       :type "string.type"
       :message "Expected type of 'string, got 'long"
       :schema [enums-schema :gender :type]}

      {:message "Expected '42' in #{\"Male\" \"Female\"}"
       :type "enum"
       :schema [enums-schema :gender :enum]
       :path [:gender]}]}}

   {:desc "given map has wrong string value"
    :do {:type zen.test/validate :schema enums-schema :data {:gender "Dunno"}}
    :match
    {:errors [{:path [:gender]
               :type "enum"
               :message "Expected 'Dunno' in #{\"Male\" \"Female\"}"
               :schema [enums-schema :gender :enum]}]}}

   {:desc "valid data given"
    :do {:type zen.test/validate :schema enums-schema :data {:gender "Female"}}
    :match
    {:errors zen.test/nil?}}]}

 custom-type-def
 ;; tagged with zen/type to be compatible with v1 meta
 {:zen/tags #{zen/is-type zen/type #_zen/primitive zen/schema}
  :type zen/map}

 custom-type-schema
 {:zen/tags #{zen/schema}
  :type custom-type-def}

 custom-type-test
 {:zen/tags #{zen.test/case}
  :title "custom types test"
  :only-for #{:v2}
  :steps
  [{:desc "undefined custom type returns an error"
    :do {:type zen.test/validate
         :schema custom-type-schema
         :data {:just-a-key "just a value"}}
    :match
    {:errors
     [{:path [:just-a-key],
       :type "unknown-key",
       :message "unknown key :just-a-key"}

      {:message
       "No validate-type multimethod for 'zen.tests.types-test/custom-type-def",
       :path [],
       :type "primitive-type",
       :schema [zen.tests.types-test/custom-type-schema :type]}]}}]}}
