{ns zen.tests.case-test

 import #{zen.test}

 cases
 {:zen/tags #{zen/schema}
  :type zen/case
  :case [{:when {:type zen/vector}}
         {:when {:type zen/map
                 :require #{:are}
                 :keys {:are {:type zen/vector}}}}
         {:when {:type zen/map
                 :require #{:is}
                 :keys {:is {:type zen/boolean}}}
          :then {:type zen/map
                 :require #{:foo}
                 :keys {:foo {:type zen/integer
                              :min 1}}}}]}

 cases-tests
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Cases validations in map"
  :steps
  [{:desc "key required in then not given"
    :do {:type zen.test/validate :schema cases :data {:is true}}
    :match
    {:errors [{:path [:foo]
               :type "require"
               :message ":foo is required"
               :schema [cases :case 2 :then :require]}]}}

   {:desc "required key has invalid type"
    :do {:type zen.test/validate :schema cases :data {:is true :foo "bar"}}
    :match
    {:errors [{:path [:foo]
               :type "primitive-type"
               ;; TODO fix message assertion, think about whether :keys should be present in schema
;;               :message "Expected type of 'integer, got 'string"
               :schema [cases :case 2 :then #_:keys :foo]}]}}

   {:desc "required key has invalid value"
    :do {:type zen.test/validate :schema cases :data {:is true :foo 0}}
    :match
    {:errors [{:path [:foo]
               :type "integer.min"
               :message "Expected >= 1, got 0"
               :schema [cases :case 2 :then #_:keys :foo :min]}]}}

   {:desc "empty data is given"
    :do {:type zen.test/validate :schema cases :data {:nothing-given :here}}
    :match
    {:errors [{:path []
               :type "case"
;;               :message "Expected one of ({:type zen/map, :require #{:is}, :keys {:is {:type zen/boolean}}}), but none is conformant"
               :schema [cases :case]}]}}

   {:desc "valid data given"
    :do {:type zen.test/validate :schema cases :data {:is true :foo 1}}
    :match
    {:errors zen.test/nil?}}]}}
