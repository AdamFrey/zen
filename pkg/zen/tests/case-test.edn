{:ns zen.tests.case-test

 :import #{zen.test}

 cases
 {:zen/tags #{zen/schema}
  :type zen/case
  :case [{:when {:type zen/vector}}
         {:when {:type zen/map
                 :require #{:are}
                 :keys {:are {:type zen/vector}}}}
         {:when {:type zen/map
                 :require #{:is}
                 :keys {:is {:type zen/boolean}}}
          :then {:type zen/map
                 :require #{:foo}
                 :keys {:foo {:type zen/integer
                              :min 1}}}}]}

 cases-tests
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "Cases validations in map"
  :steps
  [{:desc "key required in then not given"
    :do {:type zen.test/validate :schema cases :data {:is true}}
    :match
    {:errors [{:path [:foo]
               :type "require"
               :message ":foo is required"
               :schema [cases :case 2 :then :require]}]}}

   {:desc "required key has invalid type"
    :do {:type zen.test/validate :schema cases :data {:is true :foo "bar"}}
    :match
    {:errors [{:path [:foo]
               :type "integer.type"
               :message "Expected type of 'integer, got 'string"
               ;; TODO think about :keys in schema path
               :schema [cases :case 2 :then #_:keys :foo]}]}}

   {:desc "required key has invalid value"
    :do {:type zen.test/validate :schema cases :data {:is true :foo 0}}
    :match
    {:errors [{:path [:foo]
               :type "integer.min"
               :message "Expected >= 1, got 0"
               :schema [cases :case 2 :then #_:keys :foo :min]}]}}

   {:desc "empty data is given"
    :do {:type zen.test/validate
         :schema cases
         :data {:nothing-given :here}}
    :match
    {:errors
     [{:path [:nothing-given],
       :type "unknown-key",
       :message "unknown key :nothing-given"}

      {:path []
       :type "case"
       :message "Expected one of the cases to be true"
       :schema [cases :case]}]}}

   {:desc "valid data given"
    :do {:type zen.test/validate
         :schema cases
         :data {:is true :foo 1}}
    :match
    {:errors zen.test/nil?}}]}

 title-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:title {:type zen/string}}}

 label-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:label {:type zen/string}}}

 layout-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:layout {:type zen/case
                  :case [{:when {:confirms #{title-schema}}}
                         {:when {:confirms #{label-schema}}}]}}}

 when-predicate-test
 {:zen/tags #{zen.test/case}
  :only-for #{:v2}
  :title "if when predicate is true, it adds to :visited in vtx"
  :steps
  [{:desc "valid data, label is present"
    :do {:type zen.test/validate
         :schema layout-schema
         :data {:layout {:label "Super Label"}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "valid data, title is present"
    :do {:type zen.test/validate
         :schema layout-schema
         :data {:layout {:title "Super Title"}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "valid data, both label and title are present"
    :do {:type zen.test/validate
         :schema layout-schema
         :data {:layout {:title "Super Title"}}}
    :match
    {:errors zen.test/nil?}}

   {:desc "invalid data"
    :do {:type zen.test/validate
         :schema layout-schema
         :data {:layout "just a string"}}
    :match
    {:errors
     [{:message "Expected one of the cases to be true"
       :type "case"
       :path [:layout]
       :schema [zen.tests.case-test/layout-schema :layout :case]}]}}]}}
