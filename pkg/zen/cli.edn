{:ns zen.cli

 command
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map
  :keys {:args-style {:type zen/keyword
                      :enum [{:value :positional-and-then-named}
                             {:value :positional}
                             {:value :named}]}

         :args {:type zen/map
                :require #{:type}
                :keys {:type {:type zen/symbol
                              :enum [{:value zen/map}
                                     {:value zen/vector}]}}
                :confirms #{zen/schema}}}}

 config
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map
  :require #{:commands}
  :keys {:commands {:type zen/map
                    :key {:type zen/keyword}
                    :values {:type zen/map
                             :require #{#{:config :command}}
                             :exclusive-keys #{#{:config :command}}
                             :keys {:command {:type zen/symbol :tags #{command}}
                                    :config  {:type zen/symbol :tags #{config}}}}}}}


 init
 {:zen/tags #{command}
  :zen/desc "Set up a new zen project"
  :args-style :positional
  :args {:type     zen/vector
         :maxItems 1
         :nth      {0 {:zen/desc "project-name"
                       :type zen/case
                       :case [{:when {:type zen/symbol}}
                              {:when {:type zen/string}}]}}}}

 pull-deps
 {:zen/tags #{command}
  :zen/desc "Updating all project dependencies"
  :args-style :positional
  :args {:type zen/vector
         :maxItems 0}}

 build
 {:zen/tags #{command}
  :zen/desc "Build current project into zip file"
  :args-style :positional
  :args {:type zen/vector
         :minItems 0
         :maxItems 2
         :every {:type zen/case
                 :case [{:when {:type zen/symbol}}
                        {:when {:type zen/string}}]}}}

 errors
 {:zen/tags #{command}
  :zen/desc "Show project errors"
  :args-style :positional
  :args {:type zen/vector
         :maxItems 0}}

 changes
 {:zen/tags #{command}
  :zen/desc "Show project changes"
  :args-style :positional
  :args {:type zen/vector
         :maxItems 0}}

 validate
 {:zen/tags #{command}
  :zen/desc "Validates data against a set of schemas"
  :args-style :positional
  :args {:type zen/vector
         :minItems 2
         :maxItems 2
         :nth {0 {:zen/desc "set of symbols"
                  :type zen/set
                  :every {:type zen/symbol}}
               1 {:type zen/any
                  :zen/desc "data"}}}}

 get-symbol
 {:zen/tags #{command}
  :zen/desc "Get schema by symbol"
  :args-style :positional
  :args {:type zen/vector
         :minItems 1
         :maxItems 1
         :nth {0 {:type zen/symbol
                  :zen/desc "schema-symbol"}}}}

 get-tag
 {:zen/tags #{command}
  :zen/desc "Get symbols by tag"
  :args-style :positional
  :args {:type zen/vector
         :minItems 1
         :maxItems 1
         :nth {0 {:type zen/symbol
                  :zen/desc "tag"}}}}

 exit
 {:zen/tags #{command}
  :zen/desc "exit"
  :args-style :positional
  :args {:type zen/vector
         :maxItems 0}}

 install
 {:zen/tags   #{command}
  :zen/desc   "Install a package"
  :args-style :positional
  :args       {:type     zen/vector
               :minItems 1
               :maxItems 1
               :nth      {0 {:type     zen/symbol
                             :zen/desc "package-identifier"}}}}

 zen-config
 {:zen/tags #{config}
  :commands {:init       {:command init}
             :install    {:command install}
             :pull-deps  {:command pull-deps}
             :build      {:command build}
             :errors     {:command errors}
             :changes    {:command changes}
             :validate   {:command validate}
             :get-symbol {:command get-symbol}
             :get-tag    {:command get-tag}
             :exit       {:command exit}}}}
