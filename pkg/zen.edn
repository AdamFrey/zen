{ns zen

 tag {:zen/tags #{tag}
      :zen/desc "register resource as a tag"}

 property {:zen/tags #{zen/tag}
           :zen/desc "register tag as a property - i.e. global key with schema"}

 desc {:zen/tags #{property schema}
       :type string}

 file {:zen/tags #{property schema}
       :zen/desc "file, namespace was loaded from"
       :type string}

 errors {:zen/tags #{property schema}
         :zen/desc "resource validation errors while load"
         :confirms #{schema-errors}}

 name {:zen/tags #{property schema}
       :type symbol}

 primitive {:zen/tags #{tag}
            :zen/desc "Primitive types"}

 type     {:zen/tags #{zen/tag}
           :zen/desc "register resource as a schema type"}


 tags {:zen/tags #{property schema}
       :type set
       :every {:type symbol :tags #{tag}}}


 string    {:zen/tags #{type schema primitive}
            :zen/desc "sring primitive type"
            :type map
            :keys {:minLength {:type integer
                               :min 0
                               :zen/desc "inclusive minimal length of string"}
                   :maxLength {:type integer :min 0}
                   :regex     {:type regex}}}

 regex    {:zen/tags #{type schema primitive}
           :zen/desc "regexp primitive type"
           :type map}


 integer   {:zen/tags #{type primitive schema}
            :zen/desc "integer primitive type"
            :type map
            :keys {:min {:type integer}
                   :max {:type integer}}}

 number    {:zen/tags #{type primitive schema}
            :zen/desc "number primitive type"
            :type map
            :keys {:min {:type number}
                   :max {:type number}}}

 date      {:zen/tags #{type primitive schema}
            :type map
            :keys {:in-past   {:type boolean}
                   :in-future {:type boolean}}}

 datetime  {:zen/tags #{type primitive schema}
            :type map
            :keys {:in-past {:type boolean}
                   :in-future {:type boolean}}}

 boolean   {:zen/tags #{type primitive schema}
            :type map}

 symbol    {:zen/tags #{type primitive schema}
            :type map
            :keys {:tags {:type set
                          :zen/desc "Check that symbol registered with specific tags"
                          :every {:type symbol}}}}

 keyword   {:zen/tags #{type primitive schema}
            :type map}

 coll      {:zen/tags #{schema tag}
            :type map
            :keys {:every {:confirms #{schema}}
                   :schema-index {:type map
                                  :zen/desc "resolve schema by data"
                                  :keys {:index {:type integer}
                                         :ns {:type string}}}
                   :minItems {:type integer :min 0}
                   :maxItems {:type integer :min 0}}}

 set       {:zen/tags #{type coll schema}
            :confirms #{coll}
            :type map}

 vector    {:zen/tags #{type coll schema}
            :confirms #{coll}
            :type map
            :keys {:nth {:type map
                         :key {:type integer}
                         :values {:confirms #{schema}}}}}

 list    {:zen/tags #{type coll schema}
          :confirms #{coll}
          :type map
          :keys {:nth {:type map
                       :key {:type integer}
                       :values {:confirms #{schema}}}}}

 map       {:zen/tags #{type coll schema}
            :type map
            :keys {:values {:confirms #{schema}}
                   :schema-key {:type map
                                :keys {:key {:type keyword}
                                       :ns  {:type string :zen/desc "namespace prefix to add to key"}
                                       :tags {:type set
                                              :zen/desc "limit symbols by specific tags"
                                              :every {:type symbol}}
                                       :resolve {:type map :values {:type symbol}}}
                                :require #{:key}}
                   :key {:zen/desc "Validate keys against schema. Turn off unknown-keys validation"
                         :confirms #{schema}}
                   :keys {:type map
                          :values {:confirms #{schema}}}
                   :require {:type set
                             :zen/desc "Set of required keys; set means 'one of key' is required."
                             :every {:type case
                                     :case [{:when {:type keyword}}
                                            {:when {:type set
                                                    :zen/desc "mean 'one of this keys'"
                                                    :every {:type keyword}}}]}}
                   :exclusive-keys {:type set
                                    :zen/desc "Set of exclusive groups; each group"
                                    :every {:type set
                                            :minItems 2
                                            :every {:type case
                                                    :case [{:when {:type keyword}}
                                                           {:when {:type set}
                                                            :then {:type set :every {:type keyword}}}]}}}}}

 case  {:zen/tags #{type schema}
         :type map
         :zen/desc "case definition is a collection of pairs :when and :then.
                    Starting from first pair, go until first :when schema is valid, then it validates with :then schema"
        :keys {:case {:type vector
                      :every {:type map
                              :require #{:when}
                              :keys {:when {:confirms #{schema}}
                                     :then {:confirms #{schema}}}}}}}


 any {:zen/tags #{type schema primitive}
      :zen/desc "Any type"
      :type zen/map}

 validation-fn {:zen/desc "Tag for validation functions"
                :zen/tags #{schema tag}
                :type map
                :keys {:handler {:type keyword}}}

 schema   {:zen/tags #{schema tag}
           :zen/desc "zen schema"
           :type map
           :schema-key {:key :type :tags #{type}}
           :keys {:type {:type symbol :tags #{type}}
                  :confirms {:type set
                             :zen/desc "set of schemas to confirm"
                             :every {:type symbol :tags #{schema}}}
                  :const {:type map
                          :zen/desc "Check constant"
                          :keys {:value {:type any}}} ;; TODO: apply top level schema to value
                  :enum {:type set
                         :zen/desc "Check value is in enum"
                         :every {:type map :keys {:value {:type any}}}}

                  :valuesets {:type set
                              :zen/desc "check that value is from one of valuesets;
                                         value is searched by specific :key;
                                         open semantic - i.e. no errors if at least one valueset is matched"
                              :every {:type map
                                      :keys {:name {:type symbol :tags #{valueset}}
                                             :key  {:type keyword}}}}
                  :validation {:type set
                               :zen/desc "Custom validation set of functions"
                               :every {:type symbol :tags #{validation-fn}}}}}

 resource {:zen/tags #{schema}
           :type map
           :keys {:id {:type string}
                  :resourceType {:type string}}}


 ctx {:zen/tags #{schema}
      :zen/desc "schema for context"
      :type map
      :keys {:tags {:type set :every {:type symbol}}
             :symbols {:type map}}}

 operation {:zen/tags #{schema}
            :zen/desc "Basic operation schema"
            :type map
            :keys {:params {:confirms #{schema}}
                   :result {:confirms #{schema}}
                   :middleware {:type map
                                :keys {:before {:type vector}
                                       :after  {:type vector}}}}}

 schema-errors
 {:zen/tags #{schema}
  :type vector
  :every {:type map
          :keys {:path {:type any}
                 :schema {:type any}
                 :message {:type string}
                 :resource {:type string}
                 :type {:type string}}}}

 schema-result
 {:zen/tags #{schema}
  :type map
  :keys {:errors {:confirms #{schema-errors}}}}

 valueset-provider
 {:zen/tags #{tag}
  :zen/desc "Tag to register valueset provider service;
             It may be search in ndjson or csv files,
             tables or call to external terminology server;
             valueset provider interface is TBD;
             looks like it should be bulk search by key or keys"}

 valueset
 {:zen/tags #{schema tag}
  :zen/desc "Registry (vocabulary) with free form data to make symbolic refs for validation.
             It may be just values enumeration or lookup service by provider"
  :type map
  :keys {:index-by {:type set :every {:type keyword}}
         :values   {:type vector
                    :every {:type any}}
         :provider {:type symbol :tags #{valueset-provider}}}}


 }
