{ns zen

 tag {:zen/tags #{tag}
      :zen/desc "register resource as a tag"}

 property {:zen/tags #{zen/tag}
           :zen/desc "register tag as a property - i.e. global key with schema"}

 desc {:zen/tags #{property schema}
       :type string}

 name {:zen/tags #{property schema}
       :type symbol}

 primitive {:zen/tags #{tag}
            :zen/desc "Primitive types"}


 tags {:zen/tags #{property schema}
       :type set
       :every {:type symbol}}


 string    {:zen/tags #{primitive schema}
            :zen/desc "sring primitive type"
            :type map
            :keys {:minLength {:type integer
                               :min 0
                               :zen/desc "inclusive minimal length of string"}
                   :maxLength {:type integer :min 0}
                   :regex     {:type regex}}}

 regex    {:zen/tags #{schema primitive}
           :zen/desc "regexp primitive type"
           :type map}


 integer   {:zen/tags #{primitive schema}
            :zen/desc "integer primitive type"
            :type map
            :keys {:min {:type integer}
                   :max {:type integer}}}

 number    {:zen/tags #{primitive schema}
            :zen/desc "number primitive type"
            :type map
            :keys {:min {:type number}
                   :max {:type number}}}

 date      {:zen/tags #{primitive schema}
            :type map
            :keys {:in-past   {:type boolean}
                   :in-future {:type boolean}}}

 datetime  {:zen/tags #{primitive schema}
            :type map
            :keys {:in-past {:type boolean}
                   :in-future {:type boolean}}}

 boolean   {:zen/tags #{primitive schema}
            :type map}

 symbol    {:zen/tags #{primitive schema}
            :type map}

 keyword   {:zen/tags #{primitive schema}
            :type map}

 ;;TODO: replaced with exclusive-keys
 union-key {:zen/tags #{primitive schema}
            :type map}

 coll      {:zen/tags #{schema}
            :type map
            :keys {:every {:type map :confirms #{schema}}
                   :minItems {:type integer :min 0}
                   :maxItems {:type integer :min 0}}}

 set       {:zen/tags #{coll schema}
            :type map
            :confirms #{coll}}

 vector    {:zen/tags #{coll schema}
            :type map
            :confirms #{coll}
            :keys {:nth {:type map
                         :key {:type integer}
                         :values {:type map :confirms #{schema}}}}}

 map       {:zen/tags #{coll schema}
            :type map
            :keys {:values {:type map :confirms #{schema}}
                   :schema-key {:type map
                                :keys {:key {:type keyword}
                                       :resolve {:type map :values {:type symbol}}}
                                :require #{:key}}
                   :key {:type map
                         :zen/desc "Validate keys against schema. Turn off unknown-keys validation"
                         :confirms #{schema}}
                   :keys {:type map
                          :values {:type map
                                   :confirms #{schema}
                                   :keys {:type {:type symbol}}}}
                   :require {:type set :every {:type keyword}}
                   :exclusive-keys {:type set :every {:type keyword}}}}

 case  {:zen/tags #{schema}
         :type map
         :zen/desc "case definition is a collection of pairs :when and :then.
                    Starting from first pair, go until first :when schema is valid, then it validates with :then schema"
         :keys {:case {:type vector
                        :every {:type map
                                :require #{:when}
                                :keys {:when {:type map :confirms #{schema}}
                                       :then {:type map :confirms #{schema}}}}}}}

 ;; map       {:zen/tags #{coll schema}
 ;;            :type map
 ;;            :keys {:values schema}}

 any {:zen/tags #{schema primitive}
      :zen/desc "Any type"
      :type zen/map}

 schema   {:zen/tags #{schema}
           :zen/desc "zen schema"
           :type map
           :schema-key {:key :type}
           :keys {:type {:type symbol}
                  :confirms {:type set
                             :zen/desc "set of schemas to confirm"
                             :every {:type symbol}}
                  :const {:type map
                          :zen/desc "Check constant"
                          :keys {:value {:type any}}} ;; TODO: apply top level schema to value
                  :enum {:type vector
                         :zen/desc "Check value is in enum"
                         :every {:type map :keys {:value {:type any}}}}}
           :require [:type]}

 resource {:zen/tags #{schema}
           :type map
           :keys {:id {:type string}
                  :resourceType {:type string}}}


 ctx {:zen/tags #{schema}
      :zen/desc "schema for context"
      :type map
      :keys {:tags {:type set :every {:type symbol}}
             :symbols {:type map}}}

 operation {:zen/tags #{schema}
            :zen/desc "Basic operation schema"
            :type map
            :keys {:params {:type map :confirms #{schema}}
                   :result {:type map :confirms #{schema}}
                   :middleware {:type map
                                :keys {:before {:type vector}
                                       :after  {:type vector}}}}}

 ;; reference {:zen/tags #{schema}
 ;;            :type map
 ;;            :keys {:id {:type string}
 ;;                   :resourceType {:type string}}}



 }
