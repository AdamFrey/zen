{ns zen

 regex    {types schema
           tags #{:zen/primitive}
           :desc "regexp primitive type"
           :type map
           :keys {}}

 string    {types schema
            tags #{:zen/primitive}
            :desc "sring primitive type"
            :type map
            :keys {:minLength {:type integer
                               :min 0
                               :desc "inclusive minimal length of string"}
                   :maxLength {:type integer :min 0}
                   :regex     {:type regex}}}

 integer   {types schema
            tags #{:zen/primitive}
            :desc "integer primitive type"
            :type map
            :keys {:min {:type integer}
                   :max {:type integer}}}

 number    {types schema
            tags #{:zen/primitive}
            :desc "number primitive type"
            :type map
            :keys {:min {:type number}
                   :max {:type number}}}

 date      {types schema
            tags #{:zen/primitive}
            :type map
            :keys {:in-past   {:type boolean}
                   :in-future {:type boolean}}}

 datetime  {types schema
            tags #{:zen/primitive}
            :type map
            :keys {:in-past {:type boolean}
                   :in-future {:type boolean}}}

 boolean   {types schema
            tags #{:zen/primitive}
            :type map}

 symbol    {types schema :type map}

 keyword   {types schema :type map}

 union-key {types schema :type map}


 coll      {types schema
            :type map
            :keys {:every {:confirms #{schema}}
                   :minItems {:type integer :min 0}
                   :maxItems {:type integer :min 0}}}

 set       {types schema
            :type map
            :confirms #{coll}}

 vector    {types schema
            :type map
            :confirms #{coll}}

 map       {types schema
            :type map
            :keys {:values {:confirms #{schema}}}}

 schema   {types schema
           :desc "zen schema"
           :type map
           :schema-key {:key :type}
           :keys {:type {:type symbol}
                  :confirms {:type set :every {:type symbol}}
                  :desc {:type string}

                  :schema-key {:type map
                               :keys {:key {:type keyword} :resolve {:type map :values {:type symbol}}}
                               :require #{:key}}
                  ;; part of map
                  :keys {:type map
                         :values {:type map
                                  :confirms #{schema}
                                  :keys {:type {:type symbol}}}}
                  :require {:type set :every {:type keyword}}}
           :require [:type]}

 resource {types schema
           :type map
           :keys {:id {:type string}
                  :resourceType {:type string}}}

 reference {types schema
            :type map
            :keys {:id {:type string}
                   :resourceType {:type string}}}

 op {types schema
     :desc "Operaration"}}
